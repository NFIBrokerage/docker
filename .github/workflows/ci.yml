name: Actions CI

on: push

env:
  GCP_PROJECT: relay-cuatro
  REGISTRY_HOSTNAME: us.gcr.io
  REPOSITORY: matomo

jobs:
  build-docker-image:
    name: Build Docker Image 🐳📦
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Determine the release version
      run: echo "TAG=$(echo "${{ github.ref }}" | awk -F / '{print $3}')" >> $GITHUB_ENV

    - name: Determine the Docker image tag
      run: echo "IMAGE_TAG=$REGISTRY_HOSTNAME/$GCP_PROJECT/$REPOSITORY:$TAG" >> $GITHUB_ENV

    - name: Build the Docker image
      run: cd ./apache && docker build . -t "$IMAGE_TAG"

    - name: Log in to GCP
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@20c294aabd5331f9f7b8a26e6075d41c31ce5e0d
      with:
        service_account_key: ${{ secrets.GCLOUD_JSON_KEY }}

    - name: Authorize Docker with GCR
      run: gcloud auth configure-docker

    - name: Push the Docker image
      run: docker push $IMAGE_TAG

    - name: Create a GitHub Release
      id: create_release
      uses: NFIBrokerage/create-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG }}
        release_name: Release ${{ env.TAG }}
        draft: false
        prerelease: false

    - name: Notify ops channel of build success
      run: >
        curl
        -X POST
        -H 'Content-type:application/json'
        -d "{\"text\":\":partydocker: image built for $REPOSITORY - tag $(git tag -ln $TAG)\"}"
        $SLACK_WEBHOOK
      env:
        SLACK_WEBHOOK: ${{ secrets.OPS_CHANNEL_SLACK_WEBHOOK }}
        TAG: ${{ env.TAG }}

# Generated by Elixir.Gaas.Generators.Simple.Actions.Ci
